{-# LANGUAGE
    MultiParamTypeClasses,
    RankNTypes,
    ScopedTypeVariables,
    FlexibleInstances,
    FlexibleContexts,
    UndecidableInstances,
    IncoherentInstances,
    PolyKinds #-}

class SKI r where
    app :: r (a -> b) -> r a -> r b
    s :: r ((a -> b -> c) -> (a -> b) -> a -> c)
    k :: r (a -> b -> a)
    i :: r (a -> a)

newtype SKITerm a = SKITerm { unSKITerm :: forall r. SKI r => r a }

instance SKI SKITerm where
    app f x = SKITerm $ app (unSKITerm f) (unSKITerm x)
    s = SKITerm s
    k = SKITerm k
    i = SKITerm i

newtype ShowTerm x = ShowTerm { showTerm :: String }

instance SKI ShowTerm where
    app f x = ShowTerm $ "(" ++ showTerm f ++ " " ++ showTerm x ++ ")"
    s = ShowTerm "S"
    k = ShowTerm "K"
    i = ShowTerm "I"

newtype Next repr a b = Next { unNext :: repr (a -> b) }

instance SKI repr => SKI (Next repr a) where
    app f x = Next $ app (app s $ unNext f) $ unNext x
    s = Next $ app k s
    k = Next $ app k k
    i = Next $ app k i

lam :: SKI r =>
 (forall rn. SKI rn =>
  (forall t. r t -> rn t) -> rn a -> rn b) -> r (a -> b)
lam f = unNext $ f (Next . app k) (Next i)

c :: SKITerm ((a -> b -> c) -> b -> a -> c)
c = lam (\withabc abc -> 
        lam (\withb b -> lam (\witha a ->
            app (app (witha $ withb abc) a) $ witha b)))

main :: IO ()
main = putStrLn $ showTerm $ unSKITerm c
